import { Telegraf } from 'telegraf';
import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async function connectDB() {
    try {
        await mongoose.connect(process.env.MONGODB_URI!);
        console.log('MongoDB connected');
        return mongoose.connection.db;
    } catch (err) {
        console.error('MongoDB connection error:', err);
        throw err;
    }
}

const bot = new Telegraf(process.env.BOT_TOKEN!);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
function checkAccess(userId: number): { isCreator: boolean; isAdmin: boolean } {
    const admins = process.env.ADMIN_IDS?.split(',') || [];
    return {
        isCreator: userId.toString() === process.env.CREATOR_ID,
        isAdmin: admins.includes(userId.toString())
    };
}

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
bot.command('myaccess', (ctx) => {
    const { isCreator, isAdmin } = checkAccess(ctx.from.id);
    if (isCreator) {
        ctx.reply(`‚úÖ –í—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ (ID: ${ctx.from.id})`);
    } else if (isAdmin) {
        ctx.reply(`üõ† –í—ã –∞–¥–º–∏–Ω (ID: ${ctx.from.id})`);
    } else {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }
});

// 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
bot.command('newpoll', async (ctx) => {
    const { isCreator, isAdmin } = checkAccess(ctx.from.id);
    if (!isCreator && !isAdmin) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!');

    try {
        const db = await connectDB();
        const match = ctx.message.text.match(/^\/newpoll\s+"(.+?)"\s+(.+?)\s+([–ê-–Ø–∞-—è,]+)\s+(\d{1,2}:\d{2})$/);

        if (!match) {
            return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /newpoll "–í–æ–ø—Ä–æ—Å" "–í–∞—Ä–∏–∞–Ω—Ç1" "–í–∞—Ä–∏–∞–Ω—Ç2" ... –î–Ω–∏(–ü–Ω,–°—Ä) –í—Ä–µ–º—è(13:00)');
        }

        const [_, question, optionsStr, daysStr, time] = match;
        const options = optionsStr.split('" "').map(opt => opt.replace(/"/g, ''));
        const days = daysStr.split(',');

        const result = await db.collection('polls').insertOne({
            question,
            options,
            days,
            time,
            chatId: ctx.chat.id,
            createdBy: ctx.from.id,
            createdAt: new Date()
        });

        ctx.reply(`‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω (ID: ${result.insertedId})!\n` +
            `–í–æ–ø—Ä–æ—Å: ${question}\n` +
            `–í–∞—Ä–∏–∞–Ω—Ç—ã: ${options.join(', ')}\n` +
            `–î–Ω–∏: ${days.join(', ')}\n` +
            `–í—Ä–µ–º—è: ${time}`);
    } catch (err) {
        console.error(err);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞');
    }
});

// 3. –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø—Ä–æ—Å–æ–≤
bot.command('mypolls', async (ctx) => {
    const { isCreator, isAdmin } = checkAccess(ctx.from.id);
    if (!isCreator && !isAdmin) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!');

    try {
        const db = await connectDB();
        const polls = await db.collection('polls')
            .find({ createdBy: ctx.from.id })
            .sort({ createdAt: -1 })
            .toArray();

        if (polls.length === 0) {
            return ctx.reply('‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤');
        }

        let message = 'üìÖ –í–∞—à–∏ –æ–ø—Ä–æ—Å—ã:\n\n';
        polls.forEach((poll, index) => {
            message += `üÜî ID: ${poll._id}\n` +
                `‚ùì –í–æ–ø—Ä–æ—Å: ${poll.question}\n` +
                `üìå –í–∞—Ä–∏–∞–Ω—Ç—ã: ${poll.options.join(', ')}\n` +
                `‚è∞ –ö–æ–≥–¥–∞: ${poll.days.join(', ')} –≤ ${poll.time}\n\n`;
        });

        ctx.reply(message);
    } catch (err) {
        console.error(err);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–æ–≤');
    }
});

// 4. –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
bot.command('delpoll', async (ctx) => {
    const { isCreator, isAdmin } = checkAccess(ctx.from.id);
    if (!isCreator && !isAdmin) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!');

    const pollId = ctx.message.text.split(' ')[1];
    if (!pollId) return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ–ø—Ä–æ—Å–∞: /delpoll ID_–û–ü–†–û–°–ê');

    try {
        const db = await connectDB();
        const result = await db.collection('polls').deleteOne({
            _id: new mongoose.Types.ObjectId(pollId),
            createdBy: ctx.from.id
        });

        if (result.deletedCount === 0) {
            return ctx.reply('‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤');
        }

        ctx.reply('‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    } catch (err) {
        console.error(err);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞');
    }
});

// 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
bot.command('addadmin', async (ctx) => {
    const { isCreator } = checkAccess(ctx.from.id);
    if (!isCreator) return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤!');

    const targetUser = ctx.message.reply_to_message?.from ||
        { id: parseInt(ctx.message.text.split(' ')[1]), username: 'unknown' };

    if (!targetUser.id) return ctx.reply('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ ID');

    try {
        const admins = process.env.ADMIN_IDS?.split(',') || [];
        if (!admins.includes(targetUser.id.toString())) {
            admins.push(targetUser.id.toString());
            process.env.ADMIN_IDS = admins.join(',');
        }

        ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${targetUser.username || targetUser.id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω`);
    } catch (err) {
        console.error(err);
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞');
    }
});

bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'));
