import { Telegraf } from 'telegraf';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import cron from 'node-cron';

dotenv.config();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞
interface Poll {
    _id: mongoose.Types.ObjectId;
    question: string;
    options: string[];
    days: string[];
    time: string;
    chatId: number;
    createdBy: number;
    createdAt: Date;
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
import { Db } from 'mongodb';

async function getDb(): Promise<Db> {
    try {
        if (mongoose.connection.readyState === 1) {
            if (!mongoose.connection.db) {
                throw new Error('MongoDB connection established, but db is undefined');
            }
            return mongoose.connection.db;
        }

        await mongoose.connect(process.env.MONGODB_URI!);
        console.log('MongoDB connected');

        if (!mongoose.connection.db) {
            throw new Error('MongoDB connected, but db is undefined');
        }
        return mongoose.connection.db;
    } catch (err) {
        console.error('MongoDB connection error:', err);
        throw new Error('Database connection failed');
    }
}

const bot = new Telegraf(process.env.BOT_TOKEN!);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
function checkAccess(userId: number): { isCreator: boolean; isAdmin: boolean } {
    const admins = (process.env.ADMIN_IDS || '').split(',').filter(Boolean);
    return {
        isCreator: userId.toString() === process.env.CREATOR_ID,
        isAdmin: admins.includes(userId.toString())
    };
}

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
bot.command('myaccess', (ctx) => {
    const { isCreator, isAdmin } = checkAccess(ctx.from.id);
    if (isCreator) {
        return ctx.reply(`‚úÖ –í—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ (ID: ${ctx.from.id})`);
    }
    if (isAdmin) {
        return ctx.reply(`üõ† –í—ã –∞–¥–º–∏–Ω (ID: ${ctx.from.id})`);
    }
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
});

// 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
bot.command('newpoll', async (ctx) => {
    const { isCreator, isAdmin } = checkAccess(ctx.from.id);
    if (!isCreator && !isAdmin) {
        return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!');
    }

    try {
        const db = await getDb();
        if (!db) {
            return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }

        const args = ctx.message.text.split('"').map(s => s.trim()).filter(s => s);
        if (args.length < 5) {
            return ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: /newpoll "–í–æ–ø—Ä–æ—Å" "–í–∞—Ä–∏–∞–Ω—Ç1" "–í–∞—Ä–∏–∞–Ω—Ç2" –î–Ω–∏ –í—Ä–µ–º—è\n–ü—Ä–∏–º–µ—Ä: /newpoll "–ö–∞–∫ –¥–µ–ª–∞?" "–•–æ—Ä–æ—à–æ" "–ü–ª–æ—Ö–æ" –ü–Ω,–°—Ä 13:00');
        }

        const question = args[1];
        const options = args.slice(2, -1);
        const [days, time] = args[args.length - 1].trim().split(' ');

        const result = await db.collection<Poll>('polls').insertOne({
            _id: new mongoose.Types.ObjectId(),
            question,
            options,
            days: days.split(','),
            time,
            chatId: ctx.chat.id,
            createdBy: ctx.from.id,
            createdAt: new Date()
        });

        await ctx.reply(
            `‚úÖ *–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω*\n` +
            `üÜî ID: \`${result.insertedId}\`\n` +
            `‚ùì –í–æ–ø—Ä–æ—Å: ${question}\n` +
            `üìå –í–∞—Ä–∏–∞–Ω—Ç—ã: ${options.join(', ')}\n` +
            `‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${days} –≤ ${time}`,
            { parse_mode: 'Markdown' }
        );
    } catch (err) {
        console.error('Poll creation error:', err);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞');
    }
});

// 3. –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø—Ä–æ—Å–æ–≤
bot.command('mypolls', async (ctx) => {
    const { isCreator, isAdmin } = checkAccess(ctx.from.id);
    if (!isCreator && !isAdmin) {
        return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!');
    }

    try {
        const db = await getDb();
        if (!db) {
            return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }

        const polls = await db.collection<Poll>('polls')
            .find({ createdBy: ctx.from.id })
            .sort({ createdAt: -1 })
            .toArray();

        if (polls.length === 0) {
            return ctx.reply('‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤');
        }

        let message = 'üìÖ *–í–∞—à–∏ –æ–ø—Ä–æ—Å—ã*\n\n';
        polls.forEach(poll => {
            message += `üÜî ID: \`${poll._id}\`\n` +
                `‚ùì ${poll.question}\n` +
                `üìå ${poll.options.join(', ')}\n` +
                `‚è∞ ${poll.days.join(', ')} –≤ ${poll.time}\n\n`;
        });

        await ctx.replyWithMarkdown(message);
    } catch (err) {
        console.error('Poll list error:', err);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤');
    }
});

// 4. –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
bot.command('delpoll', async (ctx) => {
    const { isCreator, isAdmin } = checkAccess(ctx.from.id);
    if (!isCreator && !isAdmin) {
        return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!');
    }

    const pollId = ctx.message.text.split(' ')[1];
    if (!pollId || !mongoose.Types.ObjectId.isValid(pollId)) {
        return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ–ø—Ä–æ—Å–∞: /delpoll ID_–û–ü–†–û–°–ê');
    }

    try {
        const db = await getDb();
        if (!db) {
            return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }

        const result = await db.collection<Poll>('polls').deleteOne({
            _id: new mongoose.Types.ObjectId(pollId),
            createdBy: ctx.from.id
        });

        if (result.deletedCount === 0) {
            return ctx.reply('‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ');
        }

        await ctx.reply('‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    } catch (err) {
        console.error('Poll delete error:', err);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞');
    }
});

// 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
bot.command('addadmin', async (ctx) => {
    const { isCreator } = checkAccess(ctx.from.id);
    if (!isCreator) {
        return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤!');
    }

    try {
        let targetId: number;
        let username = 'unknown';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (ctx.message.reply_to_message && ctx.message.reply_to_message.from) {
            targetId = ctx.message.reply_to_message.from.id;
            username = ctx.message.reply_to_message.from.username || username;
        } else {
            const args = ctx.message.text.split(' ');
            if (args.length < 2) {
                return ctx.reply('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID: /addadmin USER_ID');
            }
            targetId = parseInt(args[1]);
        }

        if (!targetId) {
            return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }

        const admins = (process.env.ADMIN_IDS || '').split(',').filter(Boolean);
        if (!admins.includes(targetId.toString())) {
            admins.push(targetId.toString());
            process.env.ADMIN_IDS = admins.join(',');
        }

        await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} (ID: ${targetId}) –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω`);
    } catch (err) {
        console.error('Add admin error:', err);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}:`, err);
});

function startScheduler() {
    cron.schedule('* * * * *', async () => {
        try {
            const db = await getDb();
            const now = new Date();
            const day = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'][now.getDay()];
            const time = now.toTimeString().slice(0, 5); // —Ñ–æ—Ä–º–∞—Ç HH:MM

            const polls = await db.collection<Poll>('polls').find({ days: day, time }).toArray();
            for (const poll of polls) {
                await bot.telegram.sendPoll(
                    poll.chatId,
                    poll.question,
                    poll.options,
                    { is_anonymous: false }
                );
            }
        } catch (err) {
            console.error('Scheduler error:', err);
        }
    });

    console.log('‚è∞ –®–µ–¥—É–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω');
}

async function startBot() {
    try {
        await getDb(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        await bot.launch();
        console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
        startScheduler(); // üëà –∑–∞–ø—É—Å–∫ —à–µ–¥—É–ª–µ—Ä–∞
    } catch (err) {
        console.error('Failed to start bot:', err);
        process.exit(1);
    }
}

startBot();

// Graceful shutdown
process.once('SIGINT', () => {
    bot.stop('SIGINT');
    mongoose.disconnect();
});
process.once('SIGTERM', () => {
    bot.stop('SIGTERM');
    mongoose.disconnect();
});
