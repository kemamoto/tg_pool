// src/commands/schedule.ts
import { Telegraf } from "telegraf";
import { Poll } from "../models/Poll";
import { Admin } from "../models/Admin";

export function setupScheduleCommands(bot: Telegraf) {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞/–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞
    bot.command("setschedule", async (ctx) => {
        const admin = await Admin.findOne({ userId: ctx.from.id });
        if (!admin) return ctx.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!");

        // –§–æ—Ä–º–∞—Ç: /setschedule [ID_–æ–ø—Ä–æ—Å–∞] [–î–Ω–∏] [–í—Ä–µ–º—è]
        // –ü—Ä–∏–º–µ—Ä: /setschedule 123 –ü–Ω,–°—Ä,–ü—Ç 15:30
        const args = ctx.message.text.split(' ');

        if (args.length < 4) {
            return ctx.reply("‚ùå –§–æ—Ä–º–∞—Ç: /setschedule [ID_–æ–ø—Ä–æ—Å–∞] [–î–Ω–∏(–ü–Ω,–°—Ä,–ü—Ç)] [–í—Ä–µ–º—è(15:30)]");
        }

        const pollId = args[1];
        const days = args[2].split(',');
        const time = args[3];

        try {
            const updatedPoll = await Poll.findByIdAndUpdate(
                pollId,
                { scheduledDays: days, scheduledTime: time },
                { new: true }
            );

            if (!updatedPoll) {
                return ctx.reply("‚ùå –û–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }

            ctx.reply(`‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${days.join(", ")} –≤ ${time}`);
        } catch (err) {
            console.error(err);
            ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
        }
    });

    // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    bot.command("viewschedule", async (ctx) => {
        const polls = await Poll.find({ chatId: ctx.chat.id });

        if (polls.length === 0) {
            return ctx.reply("‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤");
        }

        let message = "üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤:\n\n";
        polls.forEach(poll => {
            message += `üÜî ${poll._id}\n` +
                `‚ùì ${poll.question}\n` +
                `‚è∞ ${poll.scheduledDays.join(", ")} –≤ ${poll.scheduledTime}\n\n`;
        });

        ctx.reply(message);
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    bot.command("removeschedule", async (ctx) => {
        const admin = await Admin.findOne({ userId: ctx.from.id });
        if (!admin) return ctx.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –æ–ø—Ä–æ—Å—ã!");

        // –§–æ—Ä–º–∞—Ç: /removeschedule [ID_–æ–ø—Ä–æ—Å–∞]
        const args = ctx.message.text.split(' ');

        if (args.length < 2) {
            return ctx.reply("‚ùå –§–æ—Ä–º–∞—Ç: /removeschedule [ID_–æ–ø—Ä–æ—Å–∞]");
        }

        try {
            const deletedPoll = await Poll.findByIdAndDelete(args[1]);

            if (!deletedPoll) {
                return ctx.reply("‚ùå –û–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }

            ctx.reply("‚úÖ –û–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
        } catch (err) {
            console.error(err);
            ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞");
        }
    });
}
